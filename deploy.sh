#!/bin/bash

# Overview:
# This script automates the deployment of artifacts generated by 'agoric run'.

# Prerequisites:
# Ensure 'agoric' CLI is installed on your system.

# Step 1: Generate Artifacts
# Run 'agoric run' to generate permit.json, plan.json, and script.js.

# Step 2: Verify Artifacts
# Confirm that permit.json, plan.json, and script.js are in the same directory as deploy.sh.

# Step 3: Execute Deployment
# Run the script with the path to plan.json:
# bash deploy.sh path/to/plan.json

declare CI=false
declare createVault=false
declare dockerFlag=true

declare planFile=$1
declare CHAINID=agoriclocal
declare GAS_ADJUSTMENT=1.2
declare SIGN_BROADCAST_OPTS="--keyring-backend=test --chain-id=$CHAINID --gas=auto --gas-adjustment=$GAS_ADJUSTMENT --yes -b block"
declare -a bundleFiles=()
declare script=""
declare permit=""
declare walletName=gov1
declare agops="/usr/src/agoric-sdk/packages/agoric-cli/bin/agops"

if [[ "$2" == CI=* ]]; then
    CI="${2#CI=}"
fi

if [[ "$3" == createVault=* ]]; then
    createVault="${3#createVault=}"
fi

if [[ "$4" == dockerFlag=* ]]; then
    dockerFlag="${4#dockerFlag=}"
fi

setPermitAndScript() {
    echo "Set script and permit..."

    script=$(jq -r '.script' "$planFile")
    permit=$(jq -r '.permit' "$planFile")

    if [ "$CI" = true ]; then
        script="/usr/src/upgrade-test-scripts/$script"
        permit="/usr/src/upgrade-test-scripts/$permit"
    fi

    if [[ -z "$script" || -z "$permit" ]]; then
        echo "Error: Failed to parse required fields from $planFile"
        return 1
    fi
}

setBundleFiles() {
    echo "Setting bundle files from plan..."

    local sourceKey suffix

    if [ "$CI" = true ]; then
        sourceKey='.bundles[].fileName'
        suffix=""
    else
        sourceKey='.bundles[].bundleID'
        suffix=".json"
    fi

    while IFS= read -r line; do
        if [[ -n "$line" ]]; then
            bundleFiles+=("${line}${suffix}")
        fi
    done < <(jq -r "$sourceKey" "$planFile")
}

installBundles() {
    for b in "${bundleFiles[@]}"; do

        local installCommand="cd /usr/src && "
        if [ "$CI" = true ]; then
            installCommand="cd /usr/src/upgrade-test-scripts && "
        fi

        installCommand+="echo 'Installing $b' && "
        installCommand+="ls -sh '$b' && "
        installCommand+="agd tx swingset install-bundle --compress '@$b' "
        installCommand+="--from $walletName -bblock $SIGN_BROADCAST_OPTS"

        echo "Executing installation for bundle $b"
        execCmd "$installCommand"
        sleep 5
    done
}

copyFilesToContainer() {
    if [[ "$CI" == "true" ]]; then
        echo "Skipping file copy: running in CI environment"
        return
    fi

    local targetDir="/usr/src/"
    local containerID=$(docker ps -q | head -n 1)

    echo "Copying script file..."
    docker cp "$script" "$containerID":"$targetDir"
    echo "Copying permit file..."
    docker cp "$permit" "$containerID":"$targetDir"
    echo "Copying plan file..."
    docker cp "$planFile" "$containerID":"$targetDir"

    echo "Copying bundle files..."
    while IFS= read -r file; do
        if [[ -f "$file" ]]; then
            echo "Copying $file to container $containerID..."
            docker cp "$file" "$containerID":"$targetDir"
        else
            echo "Warning: File $file not found."
        fi
    done < <(jq -r '.bundles[].fileName' "$planFile")
}

execCmd() {
    local cmd="$1"
    if $dockerFlag; then
        local containerID=$(docker ps -q | head -n 1)
        docker exec -it "$containerID" bash -c "$cmd"
    else
        bash -c "$cmd"
    fi
}

openVault() {
    local wantMinted=450
    local giveCollateral=90
    local walletAddress="agoric1ee9hr0jyrxhy999y755mp862ljgycmwyp4pl7q"
    local openVaultCommand="${agops} vaults open --wantMinted ${wantMinted} --giveCollateral ${giveCollateral} > /tmp/want-ist.json"
    local executeOfferCommand="${agops} perf satisfaction --executeOffer /tmp/want-ist.json --from $walletAddress --keyring-backend=test"

    if [[ $createVault == true && $walletAddress ]]; then
        echo "Creating the vault..."
        execCmd "$openVaultCommand"
        sleep 5
        echo "Executing the offer..."
        execCmd "$executeOfferCommand"
    else
        echo "Vault not created"
    fi
}

acceptProposal() {
    echo "Submitting proposal to evaluate $script"
    local submitCommand="cd /usr/src && agd tx gov submit-proposal swingset-core-eval $permit $script "

    if [ "$CI" = true ]; then
        installCommand="cd /usr/src/upgrade-test-scripts && agd tx gov submit-proposal swingset-core-eval $permit $script "
    fi

    submitCommand+="--title='Install $script' --description='Evaluate $script' "
    submitCommand+="--deposit=10000000ubld --from $walletName $SIGN_BROADCAST_OPTS -o json"
    execCmd "$submitCommand"

    sleep 5

    local queryCommand="cd /usr/src && agd query gov proposals --output json | jq -c '[.proposals[] | "
    if [ "$CI" = true ]; then
        queryCommand="cd /usr/src/upgrade-test-scripts && agd query gov proposals --output json | jq -c '[.proposals[] | "
    fi
    queryCommand+="if .proposal_id == null then .id else .proposal_id end | tonumber] | max'"

    local LATEST_PROPOSAL=$(execCmd "$queryCommand" | sed 's/\x1b\[[0-9;]*m//g' | tr -d '[:space:]')
    echo "Voting on proposal ID $LATEST_PROPOSAL"
    # Filter out unnecessary ANSI escape sequences
    echo "$LATEST_PROPOSAL" | od -A n -t x1

    local voteCommand="agd tx gov vote $LATEST_PROPOSAL yes --from=validator $SIGN_BROADCAST_OPTS"
    execCmd "$voteCommand"

    echo "Fetching details for proposal ID $LATEST_PROPOSAL"
    local detailsCommand="agd query gov proposals --output json | jq -c "
    detailsCommand+="'.proposals[] | select(.proposal_id == \"$LATEST_PROPOSAL\" or .id == \"$LATEST_PROPOSAL\") "
    detailsCommand+="| [.proposal_id or .id, .voting_end_time, .status]'"

    execCmd "$detailsCommand"
}

if ! command -v jq &>/dev/null; then
    echo "jq is not installed. Installing jq..."
    execCmd "apt-get install -y jq"
fi

setPermitAndScript
setBundleFiles

echo "bundleFiles: ${bundleFiles[*]}"
echo "script: \"$script\""
echo "permit: \"$permit\""

copyFilesToContainer

openVault
installBundles
acceptProposal
